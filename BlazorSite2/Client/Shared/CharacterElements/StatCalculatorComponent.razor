@inherits CharacterComponentBase
@using BlazorSite2.Shared.Arklens
@using Un1ver5e.Web.III.Shared;
@inject IJSRuntime JS

<p>
	<h2>@(PointsLeft)</h2>
</p>
<button @onclick=@AutoAssign>🔂 Автоматически</button>

@foreach (Stat stat in Character.EnumerateStats())
{
	<p>
		@stat.Emoji |
		@(stat.DecreaseCost.AsMod() ?? "-")
		<button 
			disabled="@(!stat.CanDecrease)" 
			@onclick=@(_ => stat.TryDecrease())>
			-
		</button>
		<b>@stat.RawValue</b>
		<button 
			disabled="@(!stat.CanIncrease || stat.IncreaseCost > PointsLeft)" 
			@onclick=@(_ => stat.TryIncrease())>
			+
		</button>
		@(stat.IncreaseCost.AsMod() ?? "-")
		&nbsp;
		@if (stat.RaceAmplified is not null)
		{
			@((MarkupString)(stat.RaceAmplified.Value ? 
			"<span style=\"color: green\">+2</span>": 
			"<span style=\"color: red\">-2</span>"))
		}
		&nbsp;
		<b>@stat.DisplayValue @stat.DisplayMod.AsMod()</b>
	</p>
}

@code {
	[Parameter]
	public int TotalPoints { get; set; }

	private async Task AutoAssign()
	{
		if (Character.Class is null)
		{
			await JS.AlertAsync("Сначала вам нужно выбрать класс!");
			return;
		}
		int[] values = { 16, 14, 14, 12, 10, 8 };
		IReadOnlyList<Stat> stats = Character.Class!.GetStatsPriorityFor(Character);
		for (int i = 0; i < stats.Count; i++)
		{
			stats[i].RawValue = values[i];
		}
	}

	private int PointsLeft => TotalPoints - Character.EnumerateStats().Sum(s => s.TotalCost);
}
